{
  "id": "python_advanced",
  "name": "Python高级特性知识库",
  "description": "包含Python高级编程技巧、设计模式、性能优化等内容",
  "category": "编程语言",
  "documents": [
    {
      "id": "decorators_advanced",
      "title": "Python装饰器高级用法",
      "content": "装饰器工厂模式允许创建可配置的装饰器。使用functools.wraps保持原函数的元数据。类装饰器可以通过__call__方法实现更复杂的逻辑。装饰器可以用于缓存、权限检查、日志记录等场景。",
      "keywords": ["装饰器", "functools", "元编程", "缓存", "AOP"],
      "difficulty": "advanced"
    },
    {
      "id": "metaclasses",
      "title": "元类和动态类创建",
      "content": "元类是创建类的类，通过__new__和__init__方法控制类的创建过程。type()函数可以动态创建类。__init_subclass__提供了更简单的类定制方式。元类常用于ORM框架、API框架等。",
      "keywords": ["元类", "type", "__new__", "动态创建", "ORM"],
      "difficulty": "expert"
    },
    {
      "id": "async_patterns",
      "title": "异步编程模式",
      "content": "异步上下文管理器使用async with语句。异步生成器结合async def和yield。asyncio.gather()用于并发执行多个协程。信号量控制并发数量，避免资源耗尽。",
      "keywords": ["异步", "协程", "并发", "信号量", "上下文管理器"],
      "difficulty": "intermediate"
    },
    {
      "id": "memory_optimization",
      "title": "内存优化技巧",
      "content": "__slots__限制实例属性，节省内存。弱引用避免循环引用。生成器表达式比列表推导式更节省内存。内存池技术重用对象。gc模块手动控制垃圾回收。",
      "keywords": ["内存优化", "__slots__", "弱引用", "生成器", "垃圾回收"],
      "difficulty": "advanced"
    }
  ]
}
